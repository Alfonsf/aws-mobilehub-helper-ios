//
//  AWSUserFileManager.m
//
// Copyright 2017 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to
// copy, distribute and modify it.
//
#import "AWSUserFileManager.h"

@protocol AWSUserFileProvider <NSObject>

@required

- (void)PUTURLForKey:(NSString *)key
   completionHandler:(void(^)(NSURL *URL, NSError *error))completionHandler;

- (void)DELETEURLForKey:(NSString *)key
      completionHandler:(void (^)(NSURL *, NSError *))completionHandler;

@end

typedef NS_ENUM(NSInteger, AWSContentManagerType){
    AWSContentManagerTypeS3,
    AWSContentManagerTypeCloudFront,
};

@interface AWSContentManager() <NSURLSessionDelegate>

@property (nonatomic, strong) id<AWSUserFileProvider> contentProvider;
@property (nonatomic, strong) NSURLSession *URLSession;
@property (nonatomic, strong) NSMutableDictionary *runningTasks;

@property (nonatomic, strong) NSMutableArray *uploadingContents;

- (instancetype)initWithType:(AWSContentManagerType)type
                      bucket:(NSString *)bucket
               cloudFrontURL:(NSString *)cloudFrontURL
        serviceConfiguration:(AWSServiceConfiguration *)serviceConfiguration
                  identifier:(NSString *)identifier;

@end

@interface AWSContent()
    
@property (nonatomic, strong) AWSContentManager *manager;
@property (nonatomic, assign) AWSContentStatusType status;
@property (nonatomic, strong) NSString *key;
@property (nonatomic, assign) BOOL pinOnCompletion;

@property (nonatomic, strong) NSData *uploadData;
@property (nonatomic, copy) void(^uploadProgressBlock)(AWSLocalContent *content, NSProgress *progress);
@property (nonatomic, copy) void(^uploadCompletionHandler)(AWSLocalContent *content, NSError *error);

- (instancetype)initWithManager:(AWSContentManager *)manager;

@end

@interface AWSLocalContent()

- (instancetype)initWithData:(NSData *)data
                         key:(NSString *)key;

- (instancetype)initWithManager:(AWSContentManager *)manager
                           data:(NSData *)data
                            key:(NSString *)key;

@end

@implementation AWSUserFileManager

@dynamic uploadingContents;

static NSString *const AWSInfoUserFileManager = @"UserFileManager";
static NSString *const AWSUserFileManagerBucketName = @"S3Bucket";
static AWSSynchronizedMutableDictionary *_serviceClients = nil;

#pragma mark - Initializers

+ (instancetype)defaultUserFileManager {
    static AWSUserFileManager *_defaultUserFileManager = nil;
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        AWSServiceConfiguration *serviceConfiguration = nil;
        AWSServiceInfo *serviceInfo = [[AWSInfo defaultAWSInfo] defaultServiceInfo:AWSInfoUserFileManager];

        if (serviceInfo) {
            serviceConfiguration = [[AWSServiceConfiguration alloc] initWithRegion:serviceInfo.region
                                                               credentialsProvider:serviceInfo.cognitoCredentialsProvider];
        }

        if (!serviceConfiguration) {
            serviceConfiguration = [AWSServiceManager defaultServiceManager].defaultServiceConfiguration;
        }

        NSString *bucketName = [serviceInfo.infoDictionary objectForKey:AWSUserFileManagerBucketName];
        if (bucketName) {
            _defaultUserFileManager = [[AWSUserFileManager alloc] initWithType:AWSContentManagerTypeS3
                                                                        bucket:bucketName
                                                                 cloudFrontURL:nil
                                                          serviceConfiguration:serviceConfiguration
                                                                    identifier:AWSInfoDefault];
        } else {
            @throw [NSException exceptionWithName:NSInternalInconsistencyException
                                           reason:@"The Push Manager specific configuration is set incorrectly in the `Info.plist` file. You need to configure `Info.plist` before using this method."
                                         userInfo:nil];
        }
    });
    
    return _defaultUserFileManager;
}

+ (void)registerUserFileManagerWithConfiguration:(AWSUserFileManagerConfiguration *)userFileManagerConfiguration
                                          forKey:(NSString *)key {
    if ([key isEqualToString:AWSInfoDefault]) {
        @throw [NSException exceptionWithName:NSInternalInconsistencyException
                                       reason:@"The key used for registering this instance is a reserved key. Please use some other key to register the instance."
                                     userInfo:nil];
    }
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        _serviceClients = [AWSSynchronizedMutableDictionary new];
    });
    
    [_serviceClients setObject:[[AWSUserFileManager alloc] initWithType:AWSContentManagerTypeS3
                                                                 bucket:userFileManagerConfiguration.bucketName
                                                          cloudFrontURL:nil
                                                   serviceConfiguration:userFileManagerConfiguration.serviceConfiguration
                                                             identifier:key]
                        forKey:key];
}

+ (instancetype)UserFileManagerForKey:(NSString *)key {
    @synchronized(self) {
        AWSUserFileManager *serviceClient = [_serviceClients objectForKey:key];
        if (serviceClient) {
            return serviceClient;
        }
        
        AWSServiceInfo *serviceInfo = [[AWSInfo defaultAWSInfo] serviceInfo:AWSInfoUserFileManager
                                                                     forKey:key];
        if (serviceInfo) {
            AWSServiceConfiguration *serviceConfiguration = [[AWSServiceConfiguration alloc] initWithRegion:serviceInfo.region
                                                                                        credentialsProvider:serviceInfo.cognitoCredentialsProvider];
            NSString *bucketName = [serviceInfo.infoDictionary objectForKey:AWSUserFileManagerBucketName];
            
            if (bucketName) {
                AWSUserFileManagerConfiguration *userFileManagerConfiguration = [[AWSUserFileManagerConfiguration alloc]initWithBucketName:bucketName
                                                                                                                      serviceConfiguration:serviceConfiguration];
                
                [AWSUserFileManager registerUserFileManagerWithConfiguration:userFileManagerConfiguration forKey:key];
            } else {
                @throw [NSException exceptionWithName:NSInternalInconsistencyException
                                               reason:@"The User File Manager specific configuration is set incorrectly in the `Info.plist` file. You need to configure `Info.plist` before using this method."
                                             userInfo:nil];
            }
        }
        
        return [_serviceClients objectForKey:key];
    }
}

+ (void)removeUserFileManagerForKey:(NSString *)key {
    [_serviceClients removeObjectForKey:key];
}

- (AWSLocalContent *)localContentWithData:(NSData *)data
                                      key:(NSString *)key {
    AWSLocalContent *localContent = [[AWSLocalContent alloc] initWithManager:self
                                                                        data:data
                                                                         key:key];
    return localContent;
}

@end

@implementation AWSUserFileManagerConfiguration

@synthesize serviceConfiguration = _serviceConfiguration;

- (instancetype)initWithBucketName:(NSString *)bucketName
              serviceConfiguration:(AWSServiceConfiguration *)serviceConfiguration {
    if (self = [super init]) {
        _bucketName = bucketName;
        _serviceConfiguration = serviceConfiguration;
    }
    return self;
}

- (instancetype)initWithBucketName:(NSString *)bucketName {
    return [[AWSUserFileManagerConfiguration alloc] initWithBucketName:bucketName
                                                  serviceConfiguration:nil];
}

- (AWSServiceConfiguration *)serviceConfiguration {
    if (!_serviceConfiguration) {
        return AWSServiceManager.defaultServiceManager.defaultServiceConfiguration;
    }
    
    return _serviceConfiguration;
}

@end
