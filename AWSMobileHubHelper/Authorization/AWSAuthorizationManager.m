//
//  AWSAuthorizationManager.m
//
// Copyright 2016 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to
// copy, distribute and modify it.
//

#import "AWSAuthorizationManager.h"

NSString *const AWSAuthorizationManagerErrorDomain = @"com.amazonaws.AWSAuthorizationManager";

typedef void (^AWSCompletionBlock)(id result, NSError *error);

@interface AWSAuthorizationManager() <SFSafariViewControllerDelegate>

@property (strong, nonatomic) SFSafariViewController *safariVC;
@property (assign, nonatomic) BOOL dismissOnLoad;

@property (strong, nonatomic) AWSCompletionBlock loginCompletionHandler;
@property (strong, nonatomic) AWSCompletionBlock logoutCompletionHandler;
@property (strong, nonatomic) AWSCompletionBlock refreshCompletionHandler;

@property (strong, nonatomic) NSString *accessToken;

@end

@implementation AWSAuthorizationManager

+ (instancetype)sharedInstance {
    static AWSAuthorizationManager *_sharedInstance = nil;
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        _sharedInstance = [[AWSAuthorizationManager alloc] init];
    });
    
    return _sharedInstance;
}

+ (NSString *)constructURIWithParameters:(NSDictionary *)params {
    NSMutableString *uri = [[NSMutableString alloc] init];
    
    for (id key in params) {
        [uri appendString:[NSString stringWithFormat:@"%@=%@&", key, params[key]]];
    }
    return [uri substringToIndex:[uri length] - 1];
}

+ (NSMutableDictionary *)constructParametersWithURI:(NSString *)formString {
    
    NSMutableDictionary *queryStringDictionary = [[NSMutableDictionary alloc] init];
    NSArray *urlComponents = [formString componentsSeparatedByString:@"&"];
    
    for (NSString *keyValuePair in urlComponents) {
        NSArray *pairComponents = [keyValuePair componentsSeparatedByString:@"="];
        NSString *key = [[pairComponents firstObject] stringByRemovingPercentEncoding];
        NSString *value = [[pairComponents lastObject] stringByRemovingPercentEncoding];
        
        [queryStringDictionary setObject:value forKey:key];
    }
    
    return queryStringDictionary;
}

- (instancetype)init {
    if (self = [super init]) {
        _dismissOnLoad = NO;
        _accessToken = nil;
        return self;
    }
    return nil;
}

- (void)authorize:(UIViewController *)loginViewController completionHandler:(void (^)(id result, NSError *error)) completionHandler {
    self.loginCompletionHandler = completionHandler;
    
    if (self.accessToken != nil) {
        self.loginCompletionHandler(self.accessToken, nil);
        return;
    }
    
    self.safariVC = [[SFSafariViewController alloc] initWithURL:[self generateAuthURL] entersReaderIfAvailable:NO];
    self.safariVC.delegate = self;
    self.dismissOnLoad = NO;
    
    [loginViewController presentViewController:self.safariVC animated:NO completion:nil];
}

- (void)logout:(UIViewController *)logoutViewController completionHandler:(void (^)(id result, NSError *error)) completionHandler {
    self.logoutCompletionHandler = completionHandler;
    
    self.accessToken = nil;
    
    self.safariVC = [[SFSafariViewController alloc] initWithURL:[self generateLogoutURL] entersReaderIfAvailable:NO];
    self.safariVC.delegate = self;
    self.dismissOnLoad = YES;
    [logoutViewController presentViewController:self.safariVC animated:NO completion:nil];
}

- (BOOL)handleURL:(NSURL *)url {
    if (![self isAcceptedURL:url]) {
        return NO;
    }
    
    self.accessToken = [self findAccessCode:url];
    
    if ([self usesImplicitGrant] || [self.accessToken length] > 0) {
        [self completeLoginWithResult:self.accessToken error:nil];
        return YES;
    }
    
    NSLog(@"parsed code = %@", self.accessToken);
    
    return YES;
}

- (void)completeLoginWithResult:(id)result
                          error:(NSError *)error {
    self.loginCompletionHandler(result, result ? nil : (error ?: [NSError errorWithDomain:AWSAuthorizationManagerErrorDomain
                                                                                     code:AWSAuthorizationErrorFailedToRetrieveAccessToken
                                                                                 userInfo:nil]));
    self.loginCompletionHandler = nil;
    dispatch_async(dispatch_get_main_queue(), ^{
        [self.safariVC dismissViewControllerAnimated:true completion: nil];
    });
}

- (NSString *)getAccessToken {
    return self.accessToken;
}

- (void)refresh:(void (^)(id result, NSError *error))completionHandler {
    self.refreshCompletionHandler = completionHandler;
    // Design not determined yet.
}

#pragma mark - Override Custom Methods

- (BOOL)usesImplicitGrant {
    return NO;
}

- (NSURL *)generateAuthURL {
    [NSException raise:@"Must override this method" format:@"Override this method to generate authorization URL."];
    return [NSURL URLWithString:@"Override this method to generate authorization URL"];
}

- (NSString *)findAccessCode:(NSURL *)url {
    [NSException raise:@"Must override this method" format:@"Override this method to find access code in URL."];
    return @"Override this method to find access code in URL.";
}

- (BOOL)isAcceptedURL:(NSURL *)url {
    [NSException raise:@"Must override this method" format:@"Override this method to determine if URL is expected."];
    return NO;
}

- (NSURL *)generateLogoutURL {
    [NSException raise:@"Must override this method" format:@"Override this method to generate logout URL."];
    return [NSURL URLWithString:@"Override this method to generate logout URL."];
}

#pragma mark - SFSafariViewControllerDelegate

-(void)safariViewController:(SFSafariViewController *)controller didCompleteInitialLoad:(BOOL)didLoadSuccessfully {
    // Load finished
    if ([self dismissOnLoad]) {
        self.logoutCompletionHandler(@{@"didSucceed" : @YES}, nil);
        self.logoutCompletionHandler = nil;
        [controller dismissViewControllerAnimated:true completion: nil];
    }
}

-(void)safariViewControllerDidFinish:(SFSafariViewController *)controller {
}

@end
