//
//  AWSGoogleSignInButton.m
//  AWSGoogleSignIn
//
// Copyright 2016 Amazon.com, Inc. or its affiliates (Amazon). All Rights Reserved.
//
// Code generated by AWS Mobile Hub. Amazon gives unlimited permission to
// copy, distribute and modify it.
//

#import "AWSGoogleSignInButton.h"
#import "AWSGoogleSignInProvider.h"

typedef void (^AWSSignInManagerCompletionBlock)(id result, AWSIdentityManagerAuthState authState, NSError *error);

static NSString *GoogleLogoImageKey = @"google-no-text";
static NSString *GoogleTextImageKey = @"google-text";
static NSString *ResourceBundle = @"AWSGoogleSignInResources";
static NSString *BundleExtension = @"bundle";

@interface AWSGoogleSignInButton()

@property (nonatomic, strong) id<AWSSignInProvider> signInProvider;

@property (nonatomic, strong) UIImageView *signInButton;

@end

@implementation AWSGoogleSignInButton

@synthesize delegate;
@synthesize buttonStyle;
UIButton *googleButton;

- (id)initWithCoder:(NSCoder*)aDecoder {
    
    if (self = [super initWithCoder:aDecoder]) {
        _signInProvider = [AWSGoogleSignInProvider sharedInstance];
    }
    
    [self initGoogleButton];
    [self addSubview:googleButton];
    
    return self;
}

- (void)dealloc {
    @try {
        [self removeObserver:self forKeyPath:@"buttonStyle" context:nil];
    } @catch(id exception) {
        // ignore exception
    }
}

- (void)observeValueForKeyPath:(NSString *)keyPath ofObject:(id)object change:(NSDictionary *)change context:(void *)context {
    // property set
    if ([keyPath isEqualToString:@"buttonStyle"]) {
        if (buttonStyle == AWSSignInButtonStyleTextLogo) {
            [self setupGoogleTextButton];
        } else {
            [self setupGoogleLogoButton];
        }
        // refresh views
        [googleButton setNeedsDisplay];
        [self setNeedsDisplay];
    }
}

- (void)initGoogleButton {
    googleButton = [[UIButton alloc] init];
    [self addObserver:self forKeyPath:@"buttonStyle" options:0 context:nil];
    self.buttonStyle = AWSSignInButtonStyleLogo;
    self.clipsToBounds = YES;
    [googleButton addTarget:self
                     action:@selector(logInWithProvider:)
           forControlEvents:UIControlEventTouchDown];
    
}

- (UIImage *)getImageFromBundle:(NSString *)imageName {
    NSBundle *currentBundle = [NSBundle bundleForClass:[self class]];
    NSURL *bundleUrl = [currentBundle URLForResource:ResourceBundle withExtension:BundleExtension];
    NSBundle *imageBundle = [NSBundle bundleWithURL:bundleUrl];
    return [UIImage imageNamed:imageName
                      inBundle:imageBundle
 compatibleWithTraitCollection:nil];
}

- (void)setupGoogleLogoButton {
    CGRect buttonFrame = googleButton.frame;
    buttonFrame.size = CGSizeMake(self.frame.size.width, self.frame.size.height);
    googleButton.frame = buttonFrame;
    UIImage *providerImage = [self getImageFromBundle:GoogleLogoImageKey];
    googleButton.imageView.contentMode = UIViewContentModeScaleAspectFit;
    [googleButton setImage:providerImage forState:UIControlStateNormal];
}

- (void)setupGoogleTextButton {
    CGRect buttonFrame = googleButton.frame;
    buttonFrame.size = CGSizeMake(self.frame.size.width, self.frame.size.height);
    googleButton.frame = buttonFrame;
    UIImage *providerImage = [self getImageFromBundle:GoogleTextImageKey];
    googleButton.imageView.contentMode = UIViewContentModeScaleAspectFit;
    [googleButton setImage:providerImage forState:UIControlStateNormal];
}

- (void)setSignInProvider:(id<AWSSignInProvider>)signInProvider {
    self.signInProvider = signInProvider;
}

- (void)logInWithProvider:(id)sender {
    
    [[AWSSignInManager sharedInstance] loginWithSignInProviderKey:[self.signInProvider identityProviderName]
                                                completionHandler:^(id result, AWSIdentityManagerAuthState authState, NSError *error) {
                                                    [self.delegate onLoginWithSignInProvider:self.signInProvider
                                                                                      result:result
                                                                                   authState:authState
                                                                                       error:error];
                                                }];
}

@end
